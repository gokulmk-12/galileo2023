# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from sensor_pcb/sense.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class sense(genpy.Message):
  _md5sum = "11445e6cc93ea96e7fdeae6e74b4f86a"
  _type = "sensor_pcb/sense"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Float32 Battery_Voltage_1
std_msgs/Float32 Battery_Voltage_2
std_msgs/String Temperature 
std_msgs/Float32 GPS_Latitude
std_msgs/Float32 GPS_Longitude
geometry_msgs/Vector3 IMU


================================================================================
MSG: std_msgs/Float32
float32 data
================================================================================
MSG: std_msgs/String
string data

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['Battery_Voltage_1','Battery_Voltage_2','Temperature','GPS_Latitude','GPS_Longitude','IMU']
  _slot_types = ['std_msgs/Float32','std_msgs/Float32','std_msgs/String','std_msgs/Float32','std_msgs/Float32','geometry_msgs/Vector3']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Battery_Voltage_1,Battery_Voltage_2,Temperature,GPS_Latitude,GPS_Longitude,IMU

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(sense, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.Battery_Voltage_1 is None:
        self.Battery_Voltage_1 = std_msgs.msg.Float32()
      if self.Battery_Voltage_2 is None:
        self.Battery_Voltage_2 = std_msgs.msg.Float32()
      if self.Temperature is None:
        self.Temperature = std_msgs.msg.String()
      if self.GPS_Latitude is None:
        self.GPS_Latitude = std_msgs.msg.Float32()
      if self.GPS_Longitude is None:
        self.GPS_Longitude = std_msgs.msg.Float32()
      if self.IMU is None:
        self.IMU = geometry_msgs.msg.Vector3()
    else:
      self.Battery_Voltage_1 = std_msgs.msg.Float32()
      self.Battery_Voltage_2 = std_msgs.msg.Float32()
      self.Temperature = std_msgs.msg.String()
      self.GPS_Latitude = std_msgs.msg.Float32()
      self.GPS_Longitude = std_msgs.msg.Float32()
      self.IMU = geometry_msgs.msg.Vector3()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2f().pack(_x.Battery_Voltage_1.data, _x.Battery_Voltage_2.data))
      _x = self.Temperature.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2f3d().pack(_x.GPS_Latitude.data, _x.GPS_Longitude.data, _x.IMU.x, _x.IMU.y, _x.IMU.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.Battery_Voltage_1 is None:
        self.Battery_Voltage_1 = std_msgs.msg.Float32()
      if self.Battery_Voltage_2 is None:
        self.Battery_Voltage_2 = std_msgs.msg.Float32()
      if self.Temperature is None:
        self.Temperature = std_msgs.msg.String()
      if self.GPS_Latitude is None:
        self.GPS_Latitude = std_msgs.msg.Float32()
      if self.GPS_Longitude is None:
        self.GPS_Longitude = std_msgs.msg.Float32()
      if self.IMU is None:
        self.IMU = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.Battery_Voltage_1.data, _x.Battery_Voltage_2.data,) = _get_struct_2f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Temperature.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Temperature.data = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.GPS_Latitude.data, _x.GPS_Longitude.data, _x.IMU.x, _x.IMU.y, _x.IMU.z,) = _get_struct_2f3d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2f().pack(_x.Battery_Voltage_1.data, _x.Battery_Voltage_2.data))
      _x = self.Temperature.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2f3d().pack(_x.GPS_Latitude.data, _x.GPS_Longitude.data, _x.IMU.x, _x.IMU.y, _x.IMU.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.Battery_Voltage_1 is None:
        self.Battery_Voltage_1 = std_msgs.msg.Float32()
      if self.Battery_Voltage_2 is None:
        self.Battery_Voltage_2 = std_msgs.msg.Float32()
      if self.Temperature is None:
        self.Temperature = std_msgs.msg.String()
      if self.GPS_Latitude is None:
        self.GPS_Latitude = std_msgs.msg.Float32()
      if self.GPS_Longitude is None:
        self.GPS_Longitude = std_msgs.msg.Float32()
      if self.IMU is None:
        self.IMU = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.Battery_Voltage_1.data, _x.Battery_Voltage_2.data,) = _get_struct_2f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Temperature.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Temperature.data = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.GPS_Latitude.data, _x.GPS_Longitude.data, _x.IMU.x, _x.IMU.y, _x.IMU.z,) = _get_struct_2f3d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_2f3d = None
def _get_struct_2f3d():
    global _struct_2f3d
    if _struct_2f3d is None:
        _struct_2f3d = struct.Struct("<2f3d")
    return _struct_2f3d
